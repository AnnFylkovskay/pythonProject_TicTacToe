Index: TicTacToe.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame as pg, sys\r\nfrom pygame.locals import *\r\nimport time, random, copy, csv\r\n\r\n# Введение глобальных переменных\r\nXO = None  # -1 это игрок X, 1 это игрок O\r\nmove = None # числа от 0 до 8\r\n\r\n    # TicTacToe поле 3x3\r\nTTT= [0,0,0,0,0,0,0,0,0]\r\n    # Игровое поле разделено на 9 ячеек с определением каждой слева направо в верхнем, среднем и нижнем ряду:\r\n    # 0,1,2 - верхний ряд\r\n    # 3,4,5 - средний ряд\r\n    # 6,7,8 - нижний ряд\r\n    # всего = поле 3x3  = 9 чисел (от 0 до 8 с учетом того, что список [TTT] начинается с 0 позиции)\r\n\r\ngame_save=[]\r\n    # все этапы в одной игре - для сохранения в файл (в будущем это будет использоваться в машинном обучении)\r\n    # формула та же TTT, но с 9 позицией на текущем этапе плюс 2 дополнительных места (пример: [-1,1,-1,0,1,0,0,0,0,-6,7]\r\n    # [9]=[следующий ход X- или O-игрока. \"-\" - это X-ход, \"+\" - O-ход], (в примере: game_save[9]=-6 означает, что именно X-игрок переходит на 6-ю ячейку)\r\n    # [10]=[количество этапов в одной игре], (в примере: game_save[10]=7)\r\n\r\n# ценные данные для функции машинного обучения\r\nstage=[] # список со всеми номерами этапов в базе данных, для которых установлено текущее поле (TTT[])\r\nmove_stage=[] # список с \"следующим ходом\" в базе данных, который соответствует текущему полю (TTT[]) и этапу\r\nmoves=[]  # список с наилучшими вариантами ходов\r\n\r\n\r\nwinner = None\r\ndraw = False\r\nwidth = 400\r\nheight = 400\r\nwhite = (255, 255, 255)\r\nRED = (255,182,193)\r\nBLACK = (0, 0, 0)\r\nline_color = (10, 10, 10)\r\n\r\n# Параметры начального окна\r\npg.init()\r\nfps = 30\r\nCLOCK = pg.time.Clock()\r\nscreen = pg.display.set_mode((width, height + 100), 0, 32)\r\npg.display.set_caption(\"Крестики-Нолики\")\r\n\r\n# Загрузка изображений\r\nopening = pg.image.load('images/tic tac opening.png')\r\nx_img = pg.image.load('images/x.png')\r\no_img = pg.image.load('images/o.png')\r\n\r\n# Изменение размера изображений\r\nx_img = pg.transform.scale(x_img, (80, 80))\r\no_img = pg.transform.scale(o_img, (80, 80))\r\nopening = pg.transform.scale(opening, (width, height + 100))\r\n\r\ndef game_opening():\r\n    screen.fill(white)\r\n    screen.blit(opening, (0, 0))\r\n    pg.display.update()\r\n    time.sleep(1.5)\r\n    screen.fill(white)\r\n\r\n    # Рисование вертикальных линий\r\n    pg.draw.line(screen, line_color, (width / 3, 0), (width / 3, height), 7)\r\n    pg.draw.line(screen, line_color, (width / 3 * 2, 0), (width / 3 * 2, height), 7)\r\n    # Рисование горизонтальных линий\r\n    pg.draw.line(screen, line_color, (0, height / 3), (width, height / 3), 7)\r\n    pg.draw.line(screen, line_color, (0, height / 3 * 2), (width, height / 3 * 2), 7)\r\n\r\n    draw_status()\r\ndef draw_status(): # статус игры. Если победитель определен - вся игра переходит в файл с формулой, на экране обновляется надпись ниже\r\n    global XO, draw, game_save, filename\r\n\r\n    if winner is None and XO == -1:\r\n        message = \"Ходит X\"\r\n    if winner == -1:\r\n        message = \"X победил!\"\r\n\r\n    if winner is None and XO == 1:\r\n        message = \"Ходит 0\"\r\n    if winner == 1:\r\n        message = \"0 победил!\"\r\n    if draw:\r\n        message = 'Ничья!'\r\n\r\n    font = pg.font.Font(None, 30)\r\n    text = font.render(message, 1, (255, 255, 255))\r\n\r\n    # вывод полученного сообщения на доску\r\n    screen.fill((0, 0, 0), (0, 400, 500, 100))\r\n    text_rect = text.get_rect(center=(width / 2, 500 - 50))\r\n    screen.blit(text, text_rect)\r\n    pg.display.update()\r\n    time.sleep(0.4)\r\ndef check_win(): # Отметка победителя и проведение соответсвующей линии\r\n    global TTT, winner, draw\r\n\r\n    # Проверка наличия выигрышных строк\r\n    for row in range(0, 7, 3):  # перейти к пункту 3 в списке ТТТ\r\n        if ((TTT[row] == TTT[row + 1] == TTT[row + 2]) and (TTT[row] != 0)):\r\n            # этот ряд выиграл\r\n            winner = TTT[row]\r\n            pg.draw.line(screen, (250, 0, 0), (0, (row/3 + 1) * height / 3 - height / 6), \\\r\n                         (width, (row/3 + 1) * height / 3 - height / 6), 6)\r\n            break\r\n\r\n    # Проверка наличия выигрышных столбцов\r\n    for col in range(0, 3, 1):  # перейти к пункту 1 в списке TTT\r\n        if (TTT[col] == TTT[col + 3] == TTT[col + 6]) and (TTT[col] != 0):\r\n            # этот столбец выиграл\r\n            winner = TTT[col]\r\n            # эта строка выиграла\r\n            pg.draw.line(screen, (250, 0, 0), ((col + 1) * width / 3 - width / 6, 0), \\\r\n                         ((col + 1) * width / 3 - width / 6, height), 6)\r\n            break\r\n\r\n    # Проверка наличия диагональных победителей\r\n    if (TTT[0] == TTT[4] == TTT[8]) and (TTT[0] != 0):\r\n        # Игра выиграна по диагонали слева направо\r\n        winner = TTT[0]\r\n        pg.draw.line(screen, (250, 70, 70), (50, 50), (350, 350), 6)\r\n\r\n    if (TTT[2] == TTT[4] == TTT[6]) and (TTT[2] != 0):\r\n        # Игра выиграна по диагонали справа налево\r\n        winner = TTT[2]\r\n        pg.draw.line(screen, (250, 70, 70), (350, 50), (50, 350), 6)\r\n\r\n    if TTT.count(0) == 0 and winner is None:  # все ячейки заполнены\r\n        draw = True\r\n\r\n    draw_status()\r\n\r\ndef DrawXO(): # фиксация X или O в зависимости от выбора ячейки при игре, а также смена игрока после окончания хода (XO => - XO)\r\n    global TTT, XO, move\r\n    TTT[move] = XO\r\n    if move == 0:\r\n        posx = 30\r\n        posy = 30\r\n    if move == 1:\r\n        posx = width / 3 + 30\r\n        posy = 30\r\n    if move == 2:\r\n        posx = width / 3 * 2 + 30\r\n        posy = 30\r\n\r\n    if move == 3:\r\n        posx = 30\r\n        posy = height / 3 + 30\r\n    if move == 4:\r\n        posx = width / 3 + 30\r\n        posy = height / 3 + 30\r\n    if move == 5:\r\n        posx = width / 3 * 2 + 30\r\n        posy = height / 3 + 30\r\n\r\n    if move == 6:\r\n        posx = 30\r\n        posy = height / 3 * 2 + 30\r\n    if move == 7:\r\n        posx = width / 3 + 30\r\n        posy = height / 3 * 2 + 30\r\n    if move == 8:\r\n        posx = width / 3 * 2 + 30\r\n        posy = height / 3 * 2 + 30\r\n\r\n    if XO == -1:\r\n        screen.blit(x_img, (posx, posy))\r\n    else:\r\n        screen.blit(o_img, (posx, posy))\r\n    XO = -1*XO\r\n    pg.display.update()\r\n    check_win()\r\n\r\ndef user_click():  # щелчок игрока\r\n    global move\r\n    move = None\r\n    # Получение координат щелчка мыши\r\n    x, y = pg.mouse.get_pos()\r\n    # Получение x,y от щелчка мыши (ячейка 1-9)\r\n    if (y < height / 3) and (x < width / 3):\r\n        move = 0\r\n    elif (y < height / 3) and (x < width / 3 * 2):\r\n        move = 1\r\n    elif (y < height / 3) and (x < width):\r\n        move = 2\r\n\r\n    elif (y < height / 3 * 2) and (x < width / 3):\r\n        move = 3\r\n    elif (y < height / 3 * 2) and (x < width / 3 * 2):\r\n        move = 4\r\n    elif (y < height / 3 * 2) and (x < width):\r\n        move = 5\r\n\r\n    elif (y < height) and (x < width / 3):\r\n        move = 6\r\n    elif (y < height) and (x < width / 3 * 2):\r\n        move = 7\r\n    elif (y < height) and (x < width):\r\n        move = 8\r\n\r\ndef reset_game(): # Перезагрузка и начало новой игры\r\n    global TTT, TTT2, winner, XO, draw\r\n    time.sleep(1.5)\r\n    XO = -1\r\n    draw = False\r\n    winner = None\r\n    TTT= [0,0,0,0,0,0,0,0,0]\r\n    game_opening()\r\n    draw_status()\r\n\r\n\r\ndef for_file():  # сохраните все этапы одной игры в список game_save=[] с формулой\r\n    global TTT, game_save, move\r\n    if TTT2.count(0) <= 8:\r\n        TTT2.append((move + 1) * XO)  # добавьте будущий ход на 9-ю позицию в старом поле TTT, и XO обозначит его знаком (+/-)\r\n        # Итак, nums[9]=-5 - ход X, nums[9]=2 - ход O\r\n        # Чтобы упростить проверку внутри файла базы данных, мы отображаем номер перемещения в базе данных\r\n        # с 1-го (1...9), а не с 0-го, как в списке (0...8)\r\n        TTT3 = copy.deepcopy(TTT2)  # чтобы избежать изменений внутри временного хранилища game_save при TTT2.pop()\r\n        game_save.append(TTT3)  # добавить защищенный от любых изменений TTT3\r\n        TTT2.pop()  # удалить номер последнего (перемещения) из списка рабочих полей\r\n\r\ndef game_save_length():  # количество этапов в одной выигранной игре (game_save[...,9-следующий ход, 10-количество ходов до победы]\r\n    # Осознанный подсчет начинается со 2-го хода.\r\n    # Следовательно, победа O всегда заканчивается нечетно (5, 7), а X - четно (4, 6, 8). Ничья имеет 9 в позиции nums[10].\r\n    # Последнего (9-го) этапа каждой игры нет в game_save[], потому что он нам не нужен для сравнения.\r\n    global game_save, XO\r\n    for item in game_save:\r\n        if draw is True:  # мы должны разделить X выигрышных и ничейных ситуаций. Давайте сыграем вничью - всего 9 ходов.\r\n            item.append(9)  # или len(game_save)+1 = 9 (постоянно)\r\n        else:\r\n            item.append(len(game_save))  # на каждом этапе будет добавляться [10] позиция (4 ... 8)\r\n\r\ndef into_file():  # сохранение всех игр со всеми этапами в файле с формулой (но без дубликатов!)\r\n    global game_save\r\n    game_save_length()  # создаем финальную версию game_save[]\r\n    # Мы должны разделять, используя один и тот же файл, только шаг за шагом\r\n\r\n    filename = \"data.csv\"\r\n    with open(filename, \"r\") as file:  # только для открытия и чтения\r\n        reader = csv.reader(file)\r\n        for row_file in reader:  # читаю все строчки по отдельности\r\n            nums = list(map(int, row_file))  # одна строка записывается в переменную nums\r\n            for item in game_save:  # выполните итерацию по всем вложенным спискам\r\n                if item == nums:\r\n                    game_save.remove(item)  # нам нужны только уникальные списки = строки в файле базы данных\r\n    file.close()  # подготовка к переходу к следующему шагу\r\n\r\n    with open(filename, \"a\", newline=\"\") as file:\r\n        writer = csv.writer(file)\r\n        for item in game_save:\r\n            writer.writerow(item)  # сохранять в БД только уникальные списки (строки)\r\n    file.close()\r\n    game_save.clear()  # очистка списка после сохранения в файле\r\n\r\ndef from_file():  # получение \"наилучшего следующего хода\" из базы данных (2-й шаг в АЛГОРИТМЕ машинного обучения)\r\n    global TTT, move, XO\r\n    filename = \"data.csv\"  # основной файл базы данных\r\n    with open(filename, \"r\") as file:\r\n        reader = csv.reader(file)\r\n        for row_file in reader:\r\n            nums = list(map(int, row_file))  # одна строка - это один список с описанием этапа одной игры\r\n            if nums[:9] == TTT and nums[10] != 9:  # если текущее поле (TTT[]) равно такому же в базе данных (nums[:9])\r\n                stage.append(nums[10])  # список со всеми номерами этапов в базе данных, для которых установлено текущее поле (TTT[])\r\n                move_stage.append(abs(nums[9]))  # список с \"следующим ходом\" в базе данных, который установлен (TTT[]), и этап\r\n                # Позиция ценностей в обоих списках одинакова. Например, stage[2] соответствует move_stage[2]\r\n\r\n        if len(stage) == 0:  # если списки X и O пусты (потому что \"ничья\"), списки заполняются из nums[10]==9\r\n            for row_file in reader:\r\n                nums = list(map(int, row_file))\r\n                if nums[:9] == TTT and nums[10] == 9:\r\n                    stage.append(nums[10])\r\n                    move_stage.append(abs(nums[9]))\r\n\r\n        for q in range(0, len(stage), 1):\r\n            if stage[q] == min(stage):  # найдите минимальное значение stage [q], потому что оно дает наилучший \"следующий ход\".\r\n                moves.append(move_stage[q])  # лучший \"следующий ход\" заполняет moves[] с помощью move_stage[q] (это подходит)\r\n\r\n        if len(moves) == 0:  # если пусто (не нашел лучшего хода)\r\n            move = None  # путь для случайной ячейки в поле\r\n        elif len(moves) == 1:\r\n            move = moves[0] - 1\r\n        else:  # если есть несколько лучших \"следующих ходов\", то машина выбирает один из них случайным образом\r\n            while True:\r\n                move = moves[random.randint(0, len(moves) - 1)] - 1\r\n                if TTT[move] == 0:\r\n                    break\r\n        stage.clear()\r\n        move_stage.clear()\r\n        moves.clear()\r\ndef check_moves(): # Поиск наилучшего хода компьютера\r\n    global TTT, move\r\n    mov_map = [0, 0, 0, 0, 0, 0, 0, 0, 0] #  поле ходов перед ходом каждого компьютера в текущей ситуации\r\n    move = None\r\n    # Проверка наличия выигрышных строк\r\n    # Вычислить сумму модулей текущего значения и выигрышной ячейки проверяемого игрока, а затем умножить их на знак проверяемого игрока\r\n    # В большинстве случаев: ноль + 1 или -1 (текущий игрок), но если в ячейке одновременно два или три победителя, модуль значения должен быть равен 2 или 3 (-2 или -3)\r\n    for row in range(0, 7, 3):  # перейти к пункту 1 в списке TTT\r\n        r=TTT[row] + TTT[row + 1] + TTT[row + 2]\r\n        if abs(r) == 2:\r\n            if TTT[row] == 0:\r\n                mov = row\r\n                mov_map[mov] = (abs(mov_map[mov])+abs(int((r) / 2)))*int((r) / 2) # модуль суммы выигрыша обоих игроков и кратный на знаке текущего игрока\r\n            elif TTT[row + 1] == 0:\r\n                mov = row + 1\r\n                mov_map[mov] = (abs(mov_map[mov])+abs(int((r) / 2)))*int((r) / 2)\r\n            elif TTT[row + 2] == 0:\r\n                mov = row + 2\r\n                mov_map[mov] = (abs(mov_map[mov])+abs(int((r) / 2)))*int((r) / 2)\r\n\r\n    # Проверка наличия выигрышных столбцов\r\n    for col in range(0, 3, 1):  # перейти к пункту 1 в списке TTT\r\n        c=TTT[col] + TTT[col + 3] + TTT[col + 6]\r\n        if abs(c) == 2:\r\n            if TTT[col] == 0:\r\n                mov = col\r\n                mov_map[mov] = (abs(mov_map[mov])+abs(int((c) / 2)))*int((c) / 2)\r\n            elif TTT[col + 3] == 0:\r\n                mov = col + 3\r\n                mov_map[mov] = (abs(mov_map[mov])+abs(int((c) / 2)))*int((c) / 2)\r\n            elif TTT[col + 6] == 0:\r\n                mov = col + 6\r\n                mov_map[mov] = (abs(mov_map[mov]) + abs(int((c) / 2))) * int((c) / 2)\r\n\r\n    # Проверка наличия диагональных победителей слева направо\r\n    d_Lr=TTT[0] + TTT[4] + TTT[8]\r\n    if abs(d_Lr) == 2:\r\n        if TTT[0] == 0:\r\n            mov = 0\r\n            mov_map[mov] = (abs(mov_map[mov])+abs(int((d_Lr) / 2)))*int((d_Lr) / 2)\r\n        elif TTT[4] == 0:\r\n            mov = 4\r\n            mov_map[mov] = (abs(mov_map[mov])+abs(int((d_Lr) / 2)))*int((d_Lr) / 2)\r\n        elif TTT[8] == 0:\r\n            mov = 8\r\n            mov_map[mov] = (abs(mov_map[mov])+abs(int((d_Lr) / 2)))*int((d_Lr) / 2)\r\n\r\n        # Проверка наличия диагональных победителей справа налево\r\n    d_Rl=TTT[2] + TTT[4] + TTT[6]\r\n    if abs(d_Rl) == 2:\r\n        if TTT[2] == 0:\r\n            mov = 2\r\n            mov_map[mov] = (abs(mov_map[mov])+abs(int((d_Rl) / 2)))*int((d_Rl) / 2)\r\n        elif TTT[4] == 0:\r\n            mov = 4\r\n            mov_map[mov] = (abs(mov_map[mov])+abs(int((d_Rl) / 2)))*int((d_Rl) / 2)\r\n        elif TTT[6] == 0:\r\n            mov = 6\r\n            mov_map[mov] = (abs(mov_map[mov])+abs(int((d_Rl) / 2)))*int((d_Rl) / 2)\r\n\r\n# Если один победитель в одной ячейке\r\n    if mov_map.count(XO) > 0 and mov_map.count(-1*XO) == 0: #текущий игрок должен выбрать свою собственную клетку, если у противника нет выигрышной клетки\r\n        move = mov_map.index(XO)\r\n    if mov_map.count(-1*XO) > 0 and mov_map.count(XO) == 0: #текущий игрок должен выбрать клетку противника, если в ней нет его собственной выигрышной ячейки\r\n        move = mov_map.index(-1*XO)\r\n    if mov_map.count(XO) > 0 and mov_map.count(-1*XO) > 0: #текущий игрок должен выбрать свою собственную клетку, если у противника также есть выигрышная клетка\r\n        move = mov_map.index(XO)\r\n\r\n# Если два победителя или удвоенный один находятся в одной ячейке - предпочтение всегда отдается текущему игроку\r\n    if mov_map.count(2) > 0:\r\n        move = mov_map.index(2)\r\n    if mov_map.count(-2) > 0:\r\n        move = mov_map.index(-2)\r\ndef X_player(): # Х - игрок\r\n    global TTT, TTT2, XO, move, winner, draw\r\n\r\n    while (True):  # Запуск игрового цикла\r\n        for event in pg.event.get():\r\n            if event.type == QUIT:\r\n                pg.quit()\r\n                sys.exit()\r\n\r\n            if XO == -1: #  ход игрока X\r\n                if event.type == MOUSEBUTTONDOWN:\r\n                    user_click()  # нажать кнопку мыши для перемещения Х\r\n                    if move == None:\r\n                        continue\r\n                    else:\r\n                        if (TTT[move] == 0):\r\n                            TTT2 = copy.deepcopy(TTT)  # сохранение последнего поля списка ТТТ\r\n                            DrawXO()\r\n            if XO == 1 and draw is False and winner is None: # Движение игрока 0\r\n                TTT2 = copy.deepcopy(TTT)  # сохранение последнего поля списка ТТТ\r\n                check_moves()  # Проверка наличия XX, X_X, OO, O_O\r\n                from_file()  # загрузка из базы данных (\"data.csv\")\r\n                if move is None:\r\n                    while True:\r\n                        if TTT[4] == 0:  # Защита от дурака (когда соперник образует типичный треугольник \"X\")\r\n                            move = 4\r\n                            break\r\n                        else:  # Ход на удачу, дающий шанс играть честно, без алгоритма\r\n                            move = random.randint(0, 8)\r\n                            if TTT[move] == 0:\r\n                                break\r\n                DrawXO()\r\n\r\n        if (winner or draw):\r\n            reset_game()\r\n        pg.display.update()\r\n        CLOCK.tick(fps)\r\ndef O_player(): # O - игрок\r\n    global TTT, TTT2, XO, move, winner, draw\r\n\r\n    while (True):  # Запуск игрового цикла\r\n        for event in pg.event.get():\r\n            if event.type == QUIT:\r\n                pg.quit()\r\n                sys.exit()\r\n\r\n            if XO == -1:\r\n                TTT2 = copy.deepcopy(TTT)  # сохранить последнее поле TTT\r\n                check_moves()  # Проверка наличия XX, X_X, OO, O_O\r\n                from_file()  # загрузка из базы данных (\"data.csv\")\r\n                if move is None:\r\n                    while True:\r\n                        move = random.randint(0, 8)\r\n                        if TTT[move] == 0:\r\n                            break\r\n                DrawXO()\r\n            if XO == 1 and draw is False and winner is None:\r\n                if event.type == MOUSEBUTTONDOWN:\r\n                    user_click()  # Нажать кнопку мыши для одного перемещения X и O-ответ\r\n                    if move == None:\r\n                        continue\r\n                    else:\r\n                        if (TTT[move] == 0):\r\n                            TTT2 = copy.deepcopy(TTT) # сохраните последнее поле TTT\r\n                            DrawXO()\r\n        if (winner or draw):\r\n            reset_game()\r\n        pg.display.update()\r\n        CLOCK.tick(fps)\r\ndef menu_XO(): # Изображение для выбора X или O\r\n    screen.fill(white)\r\n    # Рисование вертикальных линий\r\n    pg.draw.line(screen, RED, (width / 3, height/3), (width / 3, height/3*2), 4)\r\n    pg.draw.line(screen, RED, (width / 3 * 2, height/3), (width / 3 * 2, height/3*2), 4)\r\n    pg.draw.line(screen, RED, (1, height / 3), (1, height / 3 * 2), 4)\r\n    pg.draw.line(screen, RED, (width-3, height / 3), (width-3, height / 3 * 2), 4)\r\n    # Рисование горизонтальных линий\r\n    pg.draw.line(screen, RED, (0, height / 3), (width/3+2, height / 3), 4)\r\n    pg.draw.line(screen, RED, (0, height / 3 * 2), (width/3+2, height / 3 * 2), 4)\r\n    pg.draw.line(screen, RED, (width / 3*2, height / 3), (width, height / 3), 4)\r\n    pg.draw.line(screen, RED, (width / 3*2, height / 3 * 2), (width, height / 3 * 2), 4)\r\n    screen.blit(x_img, (30, 160))\r\n    screen.blit(o_img, (290, 160))\r\n    font = pg.font.Font(None, 80)\r\n    text = font.render(\"X или O ?\", 1, (255, 255, 255))\r\n    # Вывод сообщения на форму\r\n    screen.fill((RED), (0, 400, 500, 100))\r\n    text_rect = text.get_rect(center=(width / 2, 500 - 50))\r\n    screen.blit(text, text_rect)\r\n    pg.display.update()\r\ndef menu_click(): # выбор игрока X или O\r\n    global XO\r\n    XO = None\r\n    # Получение координат щелчка мыши\r\n    x, y = pg.mouse.get_pos()\r\n    # Получение x,y от щелчка мыши (ячейка X или O)\r\n    if (y < height / 3 * 2) and (y > height / 3 * 1) and (x < width / 3) and (x > 0):\r\n        XO = -1\r\n    elif (y < height / 3 * 2) and (y > height / 3 * 1) and (x < width) and (x > width / 3 * 2):\r\n        XO = 1\r\n\r\nwhile XO is None:  # Запуск меню\r\n    for event in pg.event.get():\r\n        menu_XO()\r\n        if event.type == QUIT:\r\n            pg.quit()\r\n            sys.exit()\r\n        if event.type == MOUSEBUTTONDOWN:\r\n            menu_click()  # нажатие на кнопку мыши для выбора очереди Х или 0\r\n            if XO == None:\r\n                continue\r\n            else:\r\n                if XO != None:\r\n                    if XO == -1:\r\n                        message = \"X - игрок\"\r\n                    if XO == 1:\r\n                        message = \"O - игрок\"\r\n\r\n                    font = pg.font.Font(None, 60)\r\n                    text = font.render(message, 1, (255, 255, 255))\r\n\r\n                    # Вывод сообщения на форму\r\n                    screen.fill((BLACK), (0, 400, 500, 100))\r\n                    text_rect = text.get_rect(center=(width / 2, 500 - 50))\r\n                    screen.blit(text, text_rect)\r\n                    pg.display.update()\r\n                    time.sleep(1.5)\r\n                    break\r\n\r\ngame_opening()\r\n\r\nif XO==-1:\r\n    X_player() # X - игрок\r\nelif XO==1:\r\n    XO=-1 # Изменение знака. Сначала Х.\r\n    O_player() # O - игрок
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TicTacToe.py b/TicTacToe.py
--- a/TicTacToe.py	(revision e45634bb4b7016d088fb95d20ea3768715c163b5)
+++ b/TicTacToe.py	(date 1700080711827)
@@ -380,7 +380,10 @@
                             DrawXO()
             if XO == 1 and draw is False and winner is None: # Движение игрока 0
                 TTT2 = copy.deepcopy(TTT)  # сохранение последнего поля списка ТТТ
+<<<<<<< HEAD
                 check_moves()  # Проверка наличия XX, X_X, OO, O_O
+=======
+>>>>>>> 70fd89c (My commit two)
                 from_file()  # загрузка из базы данных ("data.csv")
                 if move is None:
                     while True:
@@ -408,7 +411,10 @@
 
             if XO == -1:
                 TTT2 = copy.deepcopy(TTT)  # сохранить последнее поле TTT
+<<<<<<< HEAD
                 check_moves()  # Проверка наличия XX, X_X, OO, O_O
+=======
+>>>>>>> 70fd89c (My commit two)
                 from_file()  # загрузка из базы данных ("data.csv")
                 if move is None:
                     while True:
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"b7c212c3-d522-4750-a491-36dc02a15fb1\" name=\"Changes\" comment=\"My commit\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/TicTacToe.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/TicTacToe.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Unit Test\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;AnnFylkovskay&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"5c2a7347-c847-4dd6-afc0-2c5239e0cc59\" />\r\n        <option name=\"url\" value=\"https://github.com/AnnFylkovskay/pythonProject_TicTacToe\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 8\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2Y56KAMJh7WkJHn0RNjefMPhhFh\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"git-widget-placeholder\": \"Rebasing main\",\r\n    \"last_opened_file_path\": \"C:/Users/nutik/OneDrive/Документы/Учеба/Учеба 9/Разработка программный приложений/pythonProject_TicTacToe\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"settings.editor.selected.configurable\": \"org.jetbrains.plugins.github.ui.GithubSettingsConfigurable\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\nutik\\PycharmProjects\\pythonProject_TicTacToe\" />\r\n      <recent name=\"C:\\Users\\nutik\\OneDrive\\Документы\\Учеба\\Учеба 9\\Разработка программный приложений\\pythonProject_TicTacToe\" />\r\n      <recent name=\"C:\\Users\\nutik\\PycharmProjects\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.TicTacToe\">\r\n    <configuration name=\"TicTacToe\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"pythonProject_TicTacToe\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/TicTacToe.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"TicTacToe1\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"pythonProject_TicTacToe\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/TicTacToe1.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Python tests for Un.MyTestCase\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"pythonProject_TicTacToe\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;Un.MyTestCase&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PYTHON&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.TicTacToe\" />\r\n        <item itemvalue=\"Python.TicTacToe1\" />\r\n        <item itemvalue=\"Python tests.Python tests for Un.MyTestCase\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"b7c212c3-d522-4750-a491-36dc02a15fb1\" name=\"Changes\" comment=\"\" />\r\n      <created>1699803026504</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1699803026504</updated>\r\n      <workItem from=\"1699803027591\" duration=\"5187000\" />\r\n      <workItem from=\"1699854415965\" duration=\"110000\" />\r\n      <workItem from=\"1699878068624\" duration=\"13991000\" />\r\n      <workItem from=\"1699941681872\" duration=\"106000\" />\r\n      <workItem from=\"1699952259398\" duration=\"303000\" />\r\n      <workItem from=\"1699968987999\" duration=\"6418000\" />\r\n      <workItem from=\"1699975897981\" duration=\"160000\" />\r\n      <workItem from=\"1699976162141\" duration=\"689000\" />\r\n      <workItem from=\"1699976958195\" duration=\"4868000\" />\r\n      <workItem from=\"1700032433895\" duration=\"1994000\" />\r\n      <workItem from=\"1700080080329\" duration=\"410000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"My small commit\" />\r\n    <MESSAGE value=\"My commit\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"My commit\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/pythonProject_TicTacToe$TicTacToe1.coverage\" NAME=\"TicTacToe1 Coverage Results\" MODIFIED=\"1699974612552\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/pythonProject_TicTacToe$Lab_1.coverage\" NAME=\"Lab 1 Coverage Results\" MODIFIED=\"1700050050795\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/pythonProject_TicTacToe$TicTacToe.coverage\" NAME=\"TicTacToe Coverage Results\" MODIFIED=\"1700080491516\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/pythonProject_TicTacToe$.coverage\" NAME=\" Coverage Results\" MODIFIED=\"1699807993049\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e45634bb4b7016d088fb95d20ea3768715c163b5)
+++ b/.idea/workspace.xml	(date 1700080714959)
@@ -4,7 +4,7 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="b7c212c3-d522-4750-a491-36dc02a15fb1" name="Changes" comment="My commit">
+    <list default="true" id="b7c212c3-d522-4750-a491-36dc02a15fb1" name="Changes" comment="My commit two">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/TicTacToe.py" beforeDir="false" afterPath="$PROJECT_DIR$/TicTacToe.py" afterDir="false" />
     </list>
@@ -17,18 +17,33 @@
     <option name="RECENT_TEMPLATES">
       <list>
         <option value="Python Unit Test" />
+        <option value="Python Script" />
       </list>
     </option>
   </component>
   <component name="Git.Settings">
+    <option name="PREVIOUS_COMMIT_AUTHORS">
+      <list>
+        <option value="Ann &lt;anytseloguz@yandex.ru&gt;" />
+      </list>
+    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
+<<<<<<< HEAD
   <component name="GitHubPullRequestSearchHistory">{
   &quot;lastFilter&quot;: {
     &quot;state&quot;: &quot;OPEN&quot;,
     &quot;assignee&quot;: &quot;AnnFylkovskay&quot;
   }
 }</component>
+=======
+  <component name="GitHubPullRequestSearchHistory"><![CDATA[{
+  "lastFilter": {
+    "state": "OPEN",
+    "assignee": "AnnFylkovskay"
+  }
+}]]></component>
+>>>>>>> 70fd89c (My commit two)
   <component name="GithubPullRequestsUISettings">
     <option name="selectedUrlAndAccountId">
       <UrlAndAccount>
@@ -67,7 +82,29 @@
       <recent name="C:\Users\nutik\PycharmProjects" />
     </key>
   </component>
-  <component name="RunManager" selected="Python.TicTacToe">
+  <component name="RunManager" selected="Python.Lab 1">
+    <configuration name="Lab 1" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+      <module name="pythonProject_TicTacToe" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/Lab 1.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
     <configuration name="TicTacToe" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="pythonProject_TicTacToe" />
       <option name="INTERPRETER_OPTIONS" value="" />
@@ -129,6 +166,7 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="Python.Lab 1" />
         <item itemvalue="Python.TicTacToe" />
         <item itemvalue="Python.TicTacToe1" />
         <item itemvalue="Python tests.Python tests for Un.MyTestCase" />
@@ -152,9 +190,31 @@
       <workItem from="1699975897981" duration="160000" />
       <workItem from="1699976162141" duration="689000" />
       <workItem from="1699976958195" duration="4868000" />
+<<<<<<< HEAD
       <workItem from="1700032433895" duration="1994000" />
       <workItem from="1700080080329" duration="410000" />
     </task>
+=======
+      <workItem from="1700032433895" duration="9982000" />
+    </task>
+    <task id="LOCAL-00001" summary="My commit">
+      <option name="closed" value="true" />
+      <created>1700034809246</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1700034809246</updated>
+    </task>
+    <task id="LOCAL-00002" summary="My commit two">
+      <option name="closed" value="true" />
+      <created>1700037448237</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1700037448237</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
+>>>>>>> 70fd89c (My commit two)
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -174,12 +234,22 @@
   <component name="VcsManagerConfiguration">
     <MESSAGE value="My small commit" />
     <MESSAGE value="My commit" />
+<<<<<<< HEAD
     <option name="LAST_COMMIT_MESSAGE" value="My commit" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/pythonProject_TicTacToe$TicTacToe1.coverage" NAME="TicTacToe1 Coverage Results" MODIFIED="1699974612552" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/pythonProject_TicTacToe$Lab_1.coverage" NAME="Lab 1 Coverage Results" MODIFIED="1700050050795" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/pythonProject_TicTacToe$TicTacToe.coverage" NAME="TicTacToe Coverage Results" MODIFIED="1700080491516" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+=======
+    <MESSAGE value="My commit two" />
+    <option name="LAST_COMMIT_MESSAGE" value="My commit two" />
+  </component>
+  <component name="com.intellij.coverage.CoverageDataManagerImpl">
+    <SUITE FILE_PATH="coverage/pythonProject_TicTacToe$TicTacToe1.coverage" NAME="TicTacToe1 Coverage Results" MODIFIED="1699974612552" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/pythonProject_TicTacToe$Lab_1.coverage" NAME="Lab 1 Coverage Results" MODIFIED="1700043672164" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/pythonProject_TicTacToe$TicTacToe.coverage" NAME="TicTacToe Coverage Results" MODIFIED="1700041632346" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+>>>>>>> 70fd89c (My commit two)
     <SUITE FILE_PATH="coverage/pythonProject_TicTacToe$.coverage" NAME=" Coverage Results" MODIFIED="1699807993049" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
